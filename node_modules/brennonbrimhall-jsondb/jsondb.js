module.exports = JSONDB;

function JSONDB(filepath, columnNames) {
    var fs = require("fs");
    this.filepath = filepath;
    
    //Putting data into memory
    if(!columnNames){
        this.db = JSON.parse(fs.readFileSync(this.filepath));
        
        if(!this.db.head){
            throw "Database file does not have a valid head field";    
        }
        if(!(this.db.head.maxId >= 0)){
            throw "Database file does not have a maxId field";    
        }
        if(!this.db.head.columnNames){
            throw "Database file does not have a valid column names field";
        }
        if(!(this.db.head.columnNames.length > 0)){
            throw "Database file does not have a valid column names field";
        }
    }else{
        //Setting up file structure for first time
        var newJSON = {};
        newJSON.head = {};
        newJSON.head.maxId = 0;
        newJSON.head.columnNames = columnNames;
        newJSON.data = [];
        
        fs.writeFileSync(filepath, JSON.stringify(newJSON));
        
        this.db = JSON.parse(fs.readFileSync(this.filepath));
    }
}

JSONDB.prototype.insert = function(data){
    this.db.head.maxId++;
    data.id = this.db.head.maxId;
    this.db.data.push(data);
};

JSONDB.prototype.update = function(data, id){
    for(var i = 0; i<this.db.data.length; i++){
        if(this.db.data[i].id == id){
            //Setting same id value
            data.id = this.db.data[i].id;
            this.db.data[i] = data;
        }
    }
};

JSONDB.prototype.select = function(field, value){
    var result = [];
    for(var i = 0; i<this.db.data.length; i++){
        if(this.db.data[i][field] == value){
            result.push(this.db.data[i]);
        }
    }
    return result;
};

JSONDB.prototype.selectOne = function(field, value){
    var result = [];
    for(var i = 0; i<this.db.data.length; i++){
        if(this.db.data[i][field] == value){
            result.push(this.db.data[i]);
            return result;
        }
    }
};

JSONDB.prototype.selectAll = function(){
    return this.db.data;
};

JSONDB.prototype.delete = function(id){
    for(var i = 0; i < this.db.data.length; i++){
        if(this.db.data[i].id == id){
            this.db.data.remove(i);
        }
    }
};

JSONDB.prototype.deleteOne = function(id){
    for(var i = 0; i < this.db.data.length; i++){
        if(this.db.data[i].id == id){
            this.db.data.remove(i);
            return;
        }
    }
};

Array.prototype.remove = function(from, to) {
  var rest = this.slice((to || from) + 1 || this.length);
  this.length = from < 0 ? this.length + from : from;
  return this.push.apply(this, rest);
};

JSONDB.prototype.save = function(){
    var fs = require("fs");
    fs.writeFileSync(this.filepath, JSON.stringify(this.db));
};

JSONDB.prototype.commit = function(){
    JSONDB.prototype.save();
};

JSONDB.prototype.getColumns = function(){
    return this.db.head.columnNames;  
};